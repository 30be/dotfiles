#!/usr/bin/env bash
set -euo pipefail

ENV_FILE=~/.env
export $(grep '^GEMINI_API_KEY=' "$ENV_FILE" | head -n 1)

: "${GEMINI_API_KEY:?Error: GEMINI_API_KEY not set. Check your ~/.env file.}"
MODEL="gemini-2.5-flash"
QUERY="$@"
STDIN_TEXT=$(if ! tty -s; then cat; else echo -n ""; fi)
PROMPT='
You are being used as a shell command. Your job is to be stable and deterministic, like a tool.

Examples: 

  Q: QUERY: command to capitalize a file from stdin and print to stdout
  A: tr '[:lower:]' '[:upper:]'

  Q: QUERY: How to make a soft link a -> b 
  A: ln -s b a

  Q: QUERY: nvim config files
  A: $HOME/.config/nvim

  Q: QUERY: tell a joke
  A: curl -s "https://icanhazdadjoke.com/" -H "Accept: application/json" | jq -r .joke

  Q: haskell oneliner to make 15 random letters
  A: echo "import System.Random; import Control.Monad; main = replicateM 15 (randomRIO ('a', 'z')) >>= putStrLn" > a.hs && ghc a.hs

If the input contains field TEXT:, that means that i have called you with some stdin, and that means that you should process the file yourself, and write the processed file out, no commands.

  For example:
    Q:
      QUERY: Capitalize
      TEXT: This is an example sentence
    A: THIS IS AN EXAMPLE SENTENCE

  Do not output the literal "A:", of course.

If the input contains the word "script", then you should write a minimal script, no comments. You can use any language - python/bash/JS/c++
  Examples:
    Q: QUERY: script for making a 5-minute timer with notifications
    A: #!/bin/bash
       echo "Timer started."
       sleep 300
       echo "Time is up."
       notify-send "Time is up." -u critical

    Q: QUERY: script for making a 5-minute timer with notifications
    A: #!/bin/bash
       echo "Timer started."
       sleep 300
       echo "Time is up."
       notify-send "Time is up." -u critical

  Some context: 
  I use arch linux on gnome, yay for installing packages, ghostty, nvim, notify-send
  In your output you can use any popular programs and packages, languages(if a script was asked)
  Use environment variables like $TERM_PROGRAM, $HOME, $EDITOR or similar, if possible.
  You should always answer with a command that can be executed from a terminal. Do not write the ```md blocks.

  But if the QUERY contains "-t" argument, which stands for plaintext, you can answer with plain text.

  For example:
    Q: QUERY: -t tell a joke
    A: Why did the chicken cross the road? To get to the other side.
'

[[ -n "$QUERY" ]] && PROMPT+="QUERY: ${QUERY}"
[[ -n "$STDIN_TEXT" ]] && PROMPT+="${PROMPT:+\n}TEXT: ${STDIN_TEXT}"
[[ -z "$PROMPT" ]] && {
  echo "Error: No input provided." >&2
  exit 1
}

RAW_RESPONSE=$(
  proxychains -q curl -s "https://generativelanguage.googleapis.com/v1/models/${MODEL}:generateContent?key=${GEMINI_API_KEY}" \
    -H 'Content-Type: application/json' \
    -d "$(jq -n --arg p "$PROMPT" '
      {
        "contents": [{"parts":[{"text": $p}]}],
        "generationConfig": {
          "temperature": 0.0
        }
      }
    ')"
)
echo "$RAW_RESPONSE" | jq -r '.candidates[0].content.parts[0].text // empty'
